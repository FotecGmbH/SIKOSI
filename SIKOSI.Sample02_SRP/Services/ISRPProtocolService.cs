// (C) 2019 FOTEC Forschungs- und Technologietransfer GmbH
// Research Subsidiary of FH Wiener Neustadt
// 
// Contact biss@fotec.at / www.fotec.at
// 
// Created:        03.12.2020 16:34
// Developer:      Gregor Faiman
// Project         SIKOSI
//
// Released under GPL-3.0-only

using System;
using SIKOSI.SampleDatabase03.Entities;
using System.Numerics;
using System.Threading.Tasks;

namespace SIKOSI.Sample02_SRP.Services
{
    /// <summary>
    /// Service definition for SRP services.
    /// </summary>
    public interface ISRPProtocolService
    {
        /// <summary>
        /// Gets the salt value for a given username.
        /// </summary>
        /// <param name="username">The specified username to get the salt for.</param>
        /// <returns>The salt associated with the username.</returns>
        Task<byte[]> GetSalt(string username);

        /// <summary>
        /// Generates a session key.
        /// </summary>
        /// <param name="verifier">The verifier to use in key generation.</param>
        /// <returns>The generated session key.</returns>
        /// <exception cref="ArgumentException">
        /// Is thrown if the needed values for session key generation have not yet been generated and stored with the specified verifier.
        /// Needed values for session key generation are: Client public value, Server private value, server public value.
        /// </exception>
        byte[] GenerateSessionKey(BigInteger verifier);

        /// <summary>
        /// Gets a specific user from the database.
        /// </summary>
        /// <param name="username">The username of the user to get.</param>
        /// <returns>The user object.</returns>
        /// <exception cref="ArgumentNullException">
        /// Thrown if username is null.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// Thrown if the user does not exist.
        /// </exception>
        Task<User> GetSpecificUser(string username);

        /// <summary>
        /// Validates the client client proof, ensuring that the clients session key matches the servers session key.
        /// </summary>
        /// <param name="verifier">The clients verifier. Generated during registration and stored by the server.</param>
        /// <param name="sessionKey">The session key as generated by the server.</param>
        /// <param name="clientProof">The client proof as generated and sent over by the client.</param>
        /// <returns>Whether the client proof calculated by the server matches the client proof calculated by the client.</returns>
        /// <exception cref="ArgumentNullException">
        /// Thrown if verifier, session key or client proof are null.
        /// </exception>
        bool ValidateClientProof(BigInteger verifier, byte[] sessionKey, byte[] clientProof);

        /// <summary>
        /// Calculates the server proof.
        /// </summary>
        /// <param name="verifier">Client verifier.</param>
        /// <param name="sessionKey">The session key as calculated by the server.</param>
        /// <param name="clientProof">The proof as calculated by the client and sent to the server.</param>
        /// <returns>The server proof.</returns>
        /// <exception cref="ArgumentException">
        /// Might be thrown in the <see cref="DataCache.ExtractClientValueA(BigInteger)"/> method.
        /// </exception>
        /// <exception cref="ArgumentNullException">
        /// Thrown if session key or client proof are null.
        /// </exception>
        byte[] CalculateServerProof(BigInteger verifier, byte[] sessionKey, byte[] clientProof);

        /// <summary>
        /// Creates a user record in memory for authentication.
        /// </summary>
        /// <param name="verifier">The user verifier.</param>
        /// <param name="username">The user name.</param>
        /// <param name="clientValue">Ephemeral client value generated as part of the authentication process.</param>
        /// <exception cref="ArgumentNullException">
        /// Is thrown if user name or client value are nnull.
        /// </exception>
        void CreateUserRecordInMemory(BigInteger verifier, string username, byte[] clientValue);

        /// <summary>
        /// Generates two ephemeral server values.
        /// </summary>
        /// <param name="verifier">The clients verifier.</param>
        /// <returns>The generated public server value.</returns>
        byte[] GenerateServerProtocolValues(BigInteger verifier);

        /// <summary>
        /// Checks whether a specific user exists.
        /// </summary>
        /// <param name="username">The user name to check for.</param>
        /// <returns>Whether a user with the specified user name exists.</returns>
        Task<bool> Exists(string username);

        /// <summary>
        /// Completes the registration and persists user object in database.
        /// </summary>
        /// <param name="username">The users username.</param>
        /// <param name="verifierBytes">The users generated verifier.</param>
        /// <param name="saltBytes">The users salt.</param>
        /// <returns>An empty task.</returns>
        /// <exception cref="ArgumentNullException">
        /// Is thrown if username, verifier or salt bytes are null.
        /// </exception>
        Task CompleteRegistration(string username, byte[] verifierBytes, byte[] saltBytes);

        /// <summary>
        /// Gets a message reply.
        /// </summary>
        /// <param name="username">The users username.</param>
        /// <param name="encryptedMessage">The users encrypted message.</param>
        /// <returns>A reply to the message.</returns>
        /// <exception cref="ArgumentNullException">
        /// Is thrown if username or encrypted message are null.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// Is thrown if a user with the specifie user name does not exist.
        /// </exception>
        /// <exception cref="FormatException">
        /// Is thrown if the decrypted message does not contain a colon.
        /// </exception>
        Task<byte[]> GetMessageReply(string username, byte[] encryptedMessage);
    }
}
